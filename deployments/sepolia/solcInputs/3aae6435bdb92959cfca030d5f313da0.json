{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NFTmarket.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity 0.8.25;\r\nimport  \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/*\r\n1.listing\r\n2.buying\r\n3.updating price\r\n4.delete listing\r\n5.withdraw proceeds\r\n */\r\nerror NFTmarket_PriceCannotBeZero();\r\nerror NFTmarket_NotApproved();\r\nerror NFTmarket_AlreadyListed(address nft,uint256 tokenId);\r\nerror NFTmarket_NotListed(address nft,uint256 tokenId);\r\n\r\nerror NFTmarket_NotOwner(address nft,uint256 token,address owner);\r\nerror NFTmarket_NotEnoughPrice(uint256 value,address sender);\r\nerror NFTmarket_transferFailed(address sender,uint256 proceeds);\r\nerror NFTmarket_NoProceeds();\r\ncontract NFTmarket{\r\n    //contract  variables\r\n    struct Listing{\r\n        address seller;\r\n        uint256 price;\r\n\r\n    }\r\n    mapping(address=>mapping(uint256 => Listing)) private s_listings;\r\n    mapping(address=>uint256) private s_proceeds;\r\n    //events\r\n    event ItemListed(address indexed nft, uint256 indexed tokenId, uint256 price,address sender);\r\n    event ItemBought(address indexed nftAddress,uint256 indexed tokenId,uint256 price,address buyer);\r\n    event ItemCanceled(address indexed nftAddress,uint256  indexed tokenId  );  \r\n    \r\n    //constructor\r\n\r\n    //modifiers\r\n    modifier alreadyListed(address nft,uint256 tokenId) {\r\n        Listing memory listing = s_listings[nft][tokenId];\r\n\r\n        if(listing.price>0){\r\n            revert NFTmarket_AlreadyListed(nft,tokenId);\r\n        }\r\n        _;\r\n\r\n    }\r\n    modifier isListed(address nft,uint256 tokenId) {\r\n        Listing memory listing = s_listings[nft][tokenId];\r\n\r\n        if(listing.price<=0){\r\n            revert NFTmarket_NotListed(nft,tokenId);\r\n        }\r\n        _;\r\n\r\n    }\r\n    modifier isOwner(address nftAdd,uint256 tokenId,address owner){\r\n        IERC721 nft = IERC721(nftAdd);\r\n        if(nft.ownerOf(tokenId) != owner){\r\n            revert NFTmarket_NotOwner(nftAdd,tokenId,owner);\r\n        }\r\n        _;\r\n            \r\n        }\r\n    \r\n    //main functions\r\n    function listItem(address nftAddress,uint256 tokenId,uint256 price) isOwner(nftAddress,tokenId,msg.sender) alreadyListed(nftAddress,tokenId) external {\r\n        if(price<=0){\r\n            revert NFTmarket_PriceCannotBeZero();\r\n        }\r\n        IERC721 nft = IERC721(nftAddress);\r\n        if(nft.getApproved(tokenId)!= address(this)){\r\n            revert NFTmarket_NotApproved();\r\n        }\r\n        s_listings[nftAddress][tokenId] = Listing(msg.sender,price);\r\n        emit ItemListed(nftAddress,tokenId,price,msg.sender);\r\n    }\r\n\r\n    function buyItem(address nftAddress,uint256 tokenId)   isListed(nftAddress,tokenId) public payable{\r\n        Listing memory listing = s_listings[nftAddress][tokenId];\r\n        if(msg.value<listing.price){\r\n            revert NFTmarket_NotEnoughPrice(msg.value,msg.sender);\r\n        }\r\n        s_proceeds[listing.seller] = s_proceeds[listing.seller] + msg.value;\r\n        delete s_listings[nftAddress][tokenId];\r\n        IERC721 nft = IERC721(nftAddress);\r\n        nft.safeTransferFrom(listing.seller,msg.sender,tokenId);\r\n        emit ItemBought(nftAddress,tokenId,msg.value,msg.sender);\r\n\r\n\r\n    }\r\n\r\n    function cancelListing(address nftAddress,uint256 tokenId) external isListed(nftAddress,tokenId) isOwner(nftAddress,tokenId,msg.sender) {\r\n        delete s_listings[nftAddress][tokenId];\r\n        emit ItemCanceled(nftAddress,tokenId  );  \r\n    }\r\n\r\n    function updateListing(address nftAddress,uint256 tokenId,uint256 price) external isListed(nftAddress,tokenId) isOwner(nftAddress,tokenId,msg.sender){\r\n        if(price<=0){\r\n            revert NFTmarket_PriceCannotBeZero();\r\n        }\r\n        s_listings[nftAddress][tokenId].price =price;\r\n        emit ItemListed(nftAddress,tokenId,price,msg.sender);\r\n    }\r\n\r\n    function withdraw() external payable{\r\n        uint256 proceeds = s_proceeds[msg.sender];\r\n        if(proceeds==0){\r\n            revert NFTmarket_NoProceeds();\r\n        }\r\n        delete (s_proceeds[msg.sender]);\r\n        (bool send,) = payable(msg.sender).call{value:proceeds}(\"\");\r\n        if(!send){\r\n            revert NFTmarket_transferFailed(msg.sender,proceeds);\r\n        }\r\n    }\r\n\r\n    //view functions\r\n    \r\n    function getListing(address nft,uint256 id) view external returns(Listing memory)\r\n    {\r\n        return s_listings[nft][id];\r\n    }\r\n\r\n    function getProceeds() external view returns(uint256){\r\n        return s_proceeds[msg.sender];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}